// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: platform/message.proto

package platform

import (
	context "context"
	common "github.com/winc-link/iot-cloud-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcPlatformMessageClient is the client API for RpcPlatformMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcPlatformMessageClient interface {
	// 云平台给网关发送消息入口
	PlatformMessage(ctx context.Context, in *PlatformMessageRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
}

type rpcPlatformMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcPlatformMessageClient(cc grpc.ClientConnInterface) RpcPlatformMessageClient {
	return &rpcPlatformMessageClient{cc}
}

func (c *rpcPlatformMessageClient) PlatformMessage(ctx context.Context, in *PlatformMessageRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, "/platform.RpcPlatformMessage/PlatformMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcPlatformMessageServer is the server API for RpcPlatformMessage service.
// All implementations must embed UnimplementedRpcPlatformMessageServer
// for forward compatibility
type RpcPlatformMessageServer interface {
	// 云平台给网关发送消息入口
	PlatformMessage(context.Context, *PlatformMessageRequest) (*common.CommonResponse, error)
	mustEmbedUnimplementedRpcPlatformMessageServer()
}

// UnimplementedRpcPlatformMessageServer must be embedded to have forward compatible implementations.
type UnimplementedRpcPlatformMessageServer struct {
}

func (UnimplementedRpcPlatformMessageServer) PlatformMessage(context.Context, *PlatformMessageRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformMessage not implemented")
}
func (UnimplementedRpcPlatformMessageServer) mustEmbedUnimplementedRpcPlatformMessageServer() {}

// UnsafeRpcPlatformMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcPlatformMessageServer will
// result in compilation errors.
type UnsafeRpcPlatformMessageServer interface {
	mustEmbedUnimplementedRpcPlatformMessageServer()
}

func RegisterRpcPlatformMessageServer(s grpc.ServiceRegistrar, srv RpcPlatformMessageServer) {
	s.RegisterService(&RpcPlatformMessage_ServiceDesc, srv)
}

func _RpcPlatformMessage_PlatformMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcPlatformMessageServer).PlatformMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/platform.RpcPlatformMessage/PlatformMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcPlatformMessageServer).PlatformMessage(ctx, req.(*PlatformMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcPlatformMessage_ServiceDesc is the grpc.ServiceDesc for RpcPlatformMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcPlatformMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "platform.RpcPlatformMessage",
	HandlerType: (*RpcPlatformMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlatformMessage",
			Handler:    _RpcPlatformMessage_PlatformMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/message.proto",
}
