// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: device/device.proto

package device

import (
	context "context"
	common "github.com/winc-link/iot-cloud-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcDeviceClient is the client API for RpcDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcDeviceClient interface {
	//设备连接云服务
	ConnectIotCloud(ctx context.Context, in *ConnectIotCloudRequest, opts ...grpc.CallOption) (*ConnectIotCloudResponse, error)
	// 设备断开链接
	CloseConnectIotCloud(ctx context.Context, in *CloseConnectIotCloudRequest, opts ...grpc.CallOption) (*CloseConnectIotCloudResponse, error)
	// 查询设备连接状态
	GetDeviceConnectStatus(ctx context.Context, in *GetDeviceConnectStatusRequest, opts ...grpc.CallOption) (*GetDeviceConnectStatusResponse, error)
	// 查询指定设备的详细信息
	QueryDeviceDetail(ctx context.Context, in *QueryDeviceDetailRequest, opts ...grpc.CallOption) (*QueryDeviceDetailResponse, error)
	//查询所有设备
	QueryDeviceList(ctx context.Context, in *QueryDeviceListRequest, opts ...grpc.CallOption) (*QueryDeviceListResponse, error)
	// 添加设备
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	// 删除设备
	//  rpc RegisterDevice (RegisterDeviceRequest) returns (RegisterDeviceResponse) {}
	// 平台自定义消息推Public
	PlatformCustomPublish(ctx context.Context, in *PlatformCustomPublishRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
	// 平台自定义消息UnSubscribe
	PlatformCustomUnSubscribe(ctx context.Context, in *PlatformCustomUnSubscribeRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
}

type rpcDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcDeviceClient(cc grpc.ClientConnInterface) RpcDeviceClient {
	return &rpcDeviceClient{cc}
}

func (c *rpcDeviceClient) ConnectIotCloud(ctx context.Context, in *ConnectIotCloudRequest, opts ...grpc.CallOption) (*ConnectIotCloudResponse, error) {
	out := new(ConnectIotCloudResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/ConnectIotCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) CloseConnectIotCloud(ctx context.Context, in *CloseConnectIotCloudRequest, opts ...grpc.CallOption) (*CloseConnectIotCloudResponse, error) {
	out := new(CloseConnectIotCloudResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/CloseConnectIotCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) GetDeviceConnectStatus(ctx context.Context, in *GetDeviceConnectStatusRequest, opts ...grpc.CallOption) (*GetDeviceConnectStatusResponse, error) {
	out := new(GetDeviceConnectStatusResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/GetDeviceConnectStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) QueryDeviceDetail(ctx context.Context, in *QueryDeviceDetailRequest, opts ...grpc.CallOption) (*QueryDeviceDetailResponse, error) {
	out := new(QueryDeviceDetailResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/QueryDeviceDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) QueryDeviceList(ctx context.Context, in *QueryDeviceListRequest, opts ...grpc.CallOption) (*QueryDeviceListResponse, error) {
	out := new(QueryDeviceListResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/QueryDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/RegisterDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) PlatformCustomPublish(ctx context.Context, in *PlatformCustomPublishRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/PlatformCustomPublish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcDeviceClient) PlatformCustomUnSubscribe(ctx context.Context, in *PlatformCustomUnSubscribeRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, "/device.RpcDevice/PlatformCustomUnSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcDeviceServer is the server API for RpcDevice service.
// All implementations must embed UnimplementedRpcDeviceServer
// for forward compatibility
type RpcDeviceServer interface {
	//设备连接云服务
	ConnectIotCloud(context.Context, *ConnectIotCloudRequest) (*ConnectIotCloudResponse, error)
	// 设备断开链接
	CloseConnectIotCloud(context.Context, *CloseConnectIotCloudRequest) (*CloseConnectIotCloudResponse, error)
	// 查询设备连接状态
	GetDeviceConnectStatus(context.Context, *GetDeviceConnectStatusRequest) (*GetDeviceConnectStatusResponse, error)
	// 查询指定设备的详细信息
	QueryDeviceDetail(context.Context, *QueryDeviceDetailRequest) (*QueryDeviceDetailResponse, error)
	//查询所有设备
	QueryDeviceList(context.Context, *QueryDeviceListRequest) (*QueryDeviceListResponse, error)
	// 添加设备
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	// 删除设备
	//  rpc RegisterDevice (RegisterDeviceRequest) returns (RegisterDeviceResponse) {}
	// 平台自定义消息推Public
	PlatformCustomPublish(context.Context, *PlatformCustomPublishRequest) (*common.CommonResponse, error)
	// 平台自定义消息UnSubscribe
	PlatformCustomUnSubscribe(context.Context, *PlatformCustomUnSubscribeRequest) (*common.CommonResponse, error)
	mustEmbedUnimplementedRpcDeviceServer()
}

// UnimplementedRpcDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedRpcDeviceServer struct {
}

func (UnimplementedRpcDeviceServer) ConnectIotCloud(context.Context, *ConnectIotCloudRequest) (*ConnectIotCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectIotCloud not implemented")
}
func (UnimplementedRpcDeviceServer) CloseConnectIotCloud(context.Context, *CloseConnectIotCloudRequest) (*CloseConnectIotCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseConnectIotCloud not implemented")
}
func (UnimplementedRpcDeviceServer) GetDeviceConnectStatus(context.Context, *GetDeviceConnectStatusRequest) (*GetDeviceConnectStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConnectStatus not implemented")
}
func (UnimplementedRpcDeviceServer) QueryDeviceDetail(context.Context, *QueryDeviceDetailRequest) (*QueryDeviceDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeviceDetail not implemented")
}
func (UnimplementedRpcDeviceServer) QueryDeviceList(context.Context, *QueryDeviceListRequest) (*QueryDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDeviceList not implemented")
}
func (UnimplementedRpcDeviceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedRpcDeviceServer) PlatformCustomPublish(context.Context, *PlatformCustomPublishRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformCustomPublish not implemented")
}
func (UnimplementedRpcDeviceServer) PlatformCustomUnSubscribe(context.Context, *PlatformCustomUnSubscribeRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlatformCustomUnSubscribe not implemented")
}
func (UnimplementedRpcDeviceServer) mustEmbedUnimplementedRpcDeviceServer() {}

// UnsafeRpcDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcDeviceServer will
// result in compilation errors.
type UnsafeRpcDeviceServer interface {
	mustEmbedUnimplementedRpcDeviceServer()
}

func RegisterRpcDeviceServer(s grpc.ServiceRegistrar, srv RpcDeviceServer) {
	s.RegisterService(&RpcDevice_ServiceDesc, srv)
}

func _RpcDevice_ConnectIotCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectIotCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).ConnectIotCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/ConnectIotCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).ConnectIotCloud(ctx, req.(*ConnectIotCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_CloseConnectIotCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseConnectIotCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).CloseConnectIotCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/CloseConnectIotCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).CloseConnectIotCloud(ctx, req.(*CloseConnectIotCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_GetDeviceConnectStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConnectStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).GetDeviceConnectStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/GetDeviceConnectStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).GetDeviceConnectStatus(ctx, req.(*GetDeviceConnectStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_QueryDeviceDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).QueryDeviceDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/QueryDeviceDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).QueryDeviceDetail(ctx, req.(*QueryDeviceDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_QueryDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).QueryDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/QueryDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).QueryDeviceList(ctx, req.(*QueryDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_PlatformCustomPublish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformCustomPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).PlatformCustomPublish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/PlatformCustomPublish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).PlatformCustomPublish(ctx, req.(*PlatformCustomPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcDevice_PlatformCustomUnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlatformCustomUnSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDeviceServer).PlatformCustomUnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/device.RpcDevice/PlatformCustomUnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDeviceServer).PlatformCustomUnSubscribe(ctx, req.(*PlatformCustomUnSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcDevice_ServiceDesc is the grpc.ServiceDesc for RpcDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.RpcDevice",
	HandlerType: (*RpcDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectIotCloud",
			Handler:    _RpcDevice_ConnectIotCloud_Handler,
		},
		{
			MethodName: "CloseConnectIotCloud",
			Handler:    _RpcDevice_CloseConnectIotCloud_Handler,
		},
		{
			MethodName: "GetDeviceConnectStatus",
			Handler:    _RpcDevice_GetDeviceConnectStatus_Handler,
		},
		{
			MethodName: "QueryDeviceDetail",
			Handler:    _RpcDevice_QueryDeviceDetail_Handler,
		},
		{
			MethodName: "QueryDeviceList",
			Handler:    _RpcDevice_QueryDeviceList_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _RpcDevice_RegisterDevice_Handler,
		},
		{
			MethodName: "PlatformCustomPublish",
			Handler:    _RpcDevice_PlatformCustomPublish_Handler,
		},
		{
			MethodName: "PlatformCustomUnSubscribe",
			Handler:    _RpcDevice_PlatformCustomUnSubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/device.proto",
}
