// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: notify/notify.proto

package notify

import (
	context "context"
	common "github.com/winc-link/iot-cloud-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcDriverNotifyClient is the client API for RpcDriverNotify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcDriverNotifyClient interface {
	// 驱动程序启动或停止
	DriverStatusNotify(ctx context.Context, in *DriverStatusNotifyRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
}

type rpcDriverNotifyClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcDriverNotifyClient(cc grpc.ClientConnInterface) RpcDriverNotifyClient {
	return &rpcDriverNotifyClient{cc}
}

func (c *rpcDriverNotifyClient) DriverStatusNotify(ctx context.Context, in *DriverStatusNotifyRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, "/notify.RpcDriverNotify/DriverStatusNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcDriverNotifyServer is the server API for RpcDriverNotify service.
// All implementations must embed UnimplementedRpcDriverNotifyServer
// for forward compatibility
type RpcDriverNotifyServer interface {
	// 驱动程序启动或停止
	DriverStatusNotify(context.Context, *DriverStatusNotifyRequest) (*common.CommonResponse, error)
	mustEmbedUnimplementedRpcDriverNotifyServer()
}

// UnimplementedRpcDriverNotifyServer must be embedded to have forward compatible implementations.
type UnimplementedRpcDriverNotifyServer struct {
}

func (UnimplementedRpcDriverNotifyServer) DriverStatusNotify(context.Context, *DriverStatusNotifyRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverStatusNotify not implemented")
}
func (UnimplementedRpcDriverNotifyServer) mustEmbedUnimplementedRpcDriverNotifyServer() {}

// UnsafeRpcDriverNotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcDriverNotifyServer will
// result in compilation errors.
type UnsafeRpcDriverNotifyServer interface {
	mustEmbedUnimplementedRpcDriverNotifyServer()
}

func RegisterRpcDriverNotifyServer(s grpc.ServiceRegistrar, srv RpcDriverNotifyServer) {
	s.RegisterService(&RpcDriverNotify_ServiceDesc, srv)
}

func _RpcDriverNotify_DriverStatusNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverStatusNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcDriverNotifyServer).DriverStatusNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notify.RpcDriverNotify/DriverStatusNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcDriverNotifyServer).DriverStatusNotify(ctx, req.(*DriverStatusNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcDriverNotify_ServiceDesc is the grpc.ServiceDesc for RpcDriverNotify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcDriverNotify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notify.RpcDriverNotify",
	HandlerType: (*RpcDriverNotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DriverStatusNotify",
			Handler:    _RpcDriverNotify_DriverStatusNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notify/notify.proto",
}
