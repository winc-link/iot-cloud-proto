// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: event/event.proto

package event

import (
	context "context"
	common "github.com/winc-link/iot-cloud-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcEventClient is the client API for RpcEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcEventClient interface {
	//设备事件上报
	DeviceEventReport(ctx context.Context, in *DeviceEventReportRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
}

type rpcEventClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcEventClient(cc grpc.ClientConnInterface) RpcEventClient {
	return &rpcEventClient{cc}
}

func (c *rpcEventClient) DeviceEventReport(ctx context.Context, in *DeviceEventReportRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, "/event.RpcEvent/DeviceEventReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcEventServer is the server API for RpcEvent service.
// All implementations must embed UnimplementedRpcEventServer
// for forward compatibility
type RpcEventServer interface {
	//设备事件上报
	DeviceEventReport(context.Context, *DeviceEventReportRequest) (*common.CommonResponse, error)
	mustEmbedUnimplementedRpcEventServer()
}

// UnimplementedRpcEventServer must be embedded to have forward compatible implementations.
type UnimplementedRpcEventServer struct {
}

func (UnimplementedRpcEventServer) DeviceEventReport(context.Context, *DeviceEventReportRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceEventReport not implemented")
}
func (UnimplementedRpcEventServer) mustEmbedUnimplementedRpcEventServer() {}

// UnsafeRpcEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcEventServer will
// result in compilation errors.
type UnsafeRpcEventServer interface {
	mustEmbedUnimplementedRpcEventServer()
}

func RegisterRpcEventServer(s grpc.ServiceRegistrar, srv RpcEventServer) {
	s.RegisterService(&RpcEvent_ServiceDesc, srv)
}

func _RpcEvent_DeviceEventReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceEventReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcEventServer).DeviceEventReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.RpcEvent/DeviceEventReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcEventServer).DeviceEventReport(ctx, req.(*DeviceEventReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcEvent_ServiceDesc is the grpc.ServiceDesc for RpcEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.RpcEvent",
	HandlerType: (*RpcEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeviceEventReport",
			Handler:    _RpcEvent_DeviceEventReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}
